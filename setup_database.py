#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π.
"""

import os
import sys
import sqlite3
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ sys.path
sys.path.insert(0, str(Path(__file__).parent))

from db.database import Database
from utils.logger import get_logger, setup_development_logging


def setup_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π."""
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    setup_development_logging()
    logger = get_logger('setup_database')
    
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db = Database()
        db.connect()
        
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É
        migrations = [
            ('001', 'migrations.001_initial_schema'),
            ('002', 'migrations.bcrypt_passwords_migration'),
            ('003', 'migrations.migration_003_roles_permissions'),
            ('004', 'migrations.migration_004_user_sessions'),
        ]
        
        for migration_id, migration_module in migrations:
            try:
                logger.info(f"üîÑ –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é {migration_id}...")
                
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –º–∏–≥—Ä–∞—Ü–∏–∏
                module = __import__(migration_module, fromlist=['up'])
                up_func = getattr(module, 'up')
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
                up_func(db.conn)
                
                logger.info(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è {migration_id} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ {migration_id}: {e}")
                if "already exists" in str(e).lower() or "duplicate" in str(e).lower():
                    logger.warning(f"‚ö†Ô∏è  –ú–∏–≥—Ä–∞—Ü–∏—è {migration_id} —É–∂–µ –±—ã–ª–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞")
                else:
                    raise
        
        # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        logger.info("üîÑ –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å admin
        cursor = db.conn.cursor()
        cursor.execute("SELECT id FROM Users WHERE login = 'admin'")
        if cursor.fetchone():
            logger.info("‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å admin —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            db.create_admin_user()
            logger.info("‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å admin –º–æ–∂–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è
        logger.info("üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
        user_data = db.verify_user('admin', 'admin')
        if user_data:
            logger.info("‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
        else:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        logger.info("üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        check_database_structure(db)
        
        db.close()
        
        logger.info("üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("\n" + "="*60)
        print("üéâ –ë–ê–ó–ê –î–ê–ù–ù–´–• –ì–û–¢–û–í–ê –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!")
        print("="*60)
        print("üìä –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: admin")
        print("üîê –ü–∞—Ä–æ–ª—å: admin")
        print("üë§ –†–æ–ª—å: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
        print("="*60)
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        raise


def check_database_structure(db):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    
    logger = get_logger('setup_database')
    
    required_tables = [
        'Users', 'Suppliers', 'Grades', 'RollingTypes', 'Materials',
        'roles', 'permissions', 'role_permissions', 'user_roles',
        'user_sessions', 'user_login_logs', 'session_settings'
    ]
    
    cursor = db.conn.cursor()
    cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
    existing_tables = [row[0] for row in cursor.fetchall()]
    
    missing_tables = []
    for table in required_tables:
        if table not in existing_tables:
            missing_tables.append(table)
    
    if missing_tables:
        logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–∞–±–ª–∏—Ü—ã: {', '.join(missing_tables)}")
        raise Exception(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–∞–±–ª–∏—Ü—ã: {', '.join(missing_tables)}")
    
    logger.info(f"‚úÖ –í—Å–µ {len(required_tables)} —Ç–∞–±–ª–∏—Ü –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–∑–æ–≤—ã—Ö —Ä–æ–ª–µ–π
    cursor.execute("SELECT COUNT(*) FROM roles")
    roles_count = cursor.fetchone()[0]
    logger.info(f"üìä –†–æ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ: {roles_count}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–∑–æ–≤—ã—Ö –ø—Ä–∞–≤
    cursor.execute("SELECT COUNT(*) FROM permissions")
    permissions_count = cursor.fetchone()[0]
    logger.info(f"üìä –ü—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –≤ —Å–∏—Å—Ç–µ–º–µ: {permissions_count}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute("SELECT COUNT(*) FROM Users")
    users_count = cursor.fetchone()[0]
    logger.info(f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ: {users_count}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Å—Å–∏–π
    cursor.execute("SELECT COUNT(*) FROM session_settings")
    settings_count = cursor.fetchone()[0]
    logger.info(f"üìä –ù–∞—Å—Ç—Ä–æ–µ–∫ —Å–µ—Å—Å–∏–π: {settings_count}")


if __name__ == '__main__':
    setup_database() 